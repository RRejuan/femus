#!/usr/bin/env python

###
### This file is generated automatically by SALOME v9.7.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()
sys.path.insert(0, r'/home/student/software/femus/applications/2021_fall/rifat/input')

####################################################
##       Begin of NoteBook variables section      ##
####################################################
notebook.set("l_y", 1)
notebook.set("l_x", 2)
notebook.set("half_l_y", "0.5*l_y")
####################################################
##        End of NoteBook variables section       ##
####################################################
###
### GEOM component
###

import GEOM
from salome.geom import geomBuilder
import math
import SALOMEDS


geompy = geomBuilder.New()

O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Divided_Disk_1 = geompy.MakeDividedDisk(1, 1, GEOM.SQUARE)
Rotation_1 = geompy.MakeRotation(Divided_Disk_1, OZ, 45*math.pi/180.0)
Face_1 = geompy.MakeFaceHW(2, 2, 1)
Translation_1 = geompy.MakeTranslation(Face_1, 0, 1, 0)
Cut_1 = geompy.MakeCutList(Rotation_1, [Translation_1], True)
[Face_2,Face_3,Face_4,Face_5] = geompy.ExtractShapes(Cut_1, geompy.ShapeType["FACE"], True)
[Edge_13,Edge_14,Edge_15,Edge_16] = geompy.ExtractShapes(Face_2, geompy.ShapeType["EDGE"], True)
[Edge_9,Edge_10,Edge_11,Edge_12] = geompy.ExtractShapes(Face_3, geompy.ShapeType["EDGE"], True)
[Edge_5,Edge_6,Edge_7,Edge_8] = geompy.ExtractShapes(Face_4, geompy.ShapeType["EDGE"], True)
[Edge_1,Edge_2,Edge_3,Edge_4] = geompy.ExtractShapes(Face_5, geompy.ShapeType["EDGE"], True)
[Face_2, Face_3, Face_4, Face_5] = geompy.GetExistingSubObjects(Cut_1, False)
[Face_2, Face_3, Face_4, Face_5] = geompy.GetExistingSubObjects(Cut_1, False)
[Edge_1, Edge_2, Edge_3, Edge_4] = geompy.GetExistingSubObjects(Face_5, False)
[Edge_5, Edge_6, Edge_7, Edge_8] = geompy.GetExistingSubObjects(Face_4, False)
[Edge_9, Edge_10, Edge_11, Edge_12] = geompy.GetExistingSubObjects(Face_3, False)
[Edge_13, Edge_14, Edge_15, Edge_16] = geompy.GetExistingSubObjects(Face_2, False)
[Edge_13, Edge_14, Edge_15, Edge_16] = geompy.GetExistingSubObjects(Face_2, False)
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Divided_Disk_1, 'Divided Disk_1' )
geompy.addToStudy( Rotation_1, 'Rotation_1' )
geompy.addToStudy( Face_1, 'Face_1' )
geompy.addToStudy( Translation_1, 'Translation_1' )
geompy.addToStudy( Cut_1, 'Cut_1' )
geompy.addToStudyInFather( Cut_1, Face_2, 'Face_2' )
geompy.addToStudyInFather( Cut_1, Face_3, 'Face_3' )
geompy.addToStudyInFather( Cut_1, Face_4, 'Face_4' )
geompy.addToStudyInFather( Cut_1, Face_5, 'Face_5' )
geompy.addToStudyInFather( Face_5, Edge_1, 'Edge_1' )
geompy.addToStudyInFather( Face_5, Edge_2, 'Edge_2' )
geompy.addToStudyInFather( Face_5, Edge_3, 'Edge_3' )
geompy.addToStudyInFather( Face_5, Edge_4, 'Edge_4' )
geompy.addToStudyInFather( Face_4, Edge_5, 'Edge_5' )
geompy.addToStudyInFather( Face_4, Edge_6, 'Edge_6' )
geompy.addToStudyInFather( Face_4, Edge_7, 'Edge_7' )
geompy.addToStudyInFather( Face_4, Edge_8, 'Edge_8' )
geompy.addToStudyInFather( Face_3, Edge_9, 'Edge_9' )
geompy.addToStudyInFather( Face_3, Edge_10, 'Edge_10' )
geompy.addToStudyInFather( Face_3, Edge_11, 'Edge_11' )
geompy.addToStudyInFather( Face_3, Edge_12, 'Edge_12' )
geompy.addToStudyInFather( Face_2, Edge_13, 'Edge_13' )
geompy.addToStudyInFather( Face_2, Edge_14, 'Edge_14' )
geompy.addToStudyInFather( Face_2, Edge_15, 'Edge_15' )
geompy.addToStudyInFather( Face_2, Edge_16, 'Edge_16' )

###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New()
#smesh.SetEnablePublish( False ) # Set to False to avoid publish in study if not needed or in some particular situations:
                                 # multiples meshes built in parallel, complex and numerous mesh edition (performance)

Quadrangle_Parameters_1 = smesh.CreateHypothesis('QuadrangleParams')
Quadrangle_Parameters_1.SetQuadType( smeshBuilder.QUAD_STANDARD )
Quadrangle_Parameters_1.SetTriaVertex( -1 )
Quadrangle_Parameters_1.SetEnforcedNodes( [], [] )
Quadrangle_2D = smesh.CreateHypothesis('Quadrangle_2D')
Quadrangle_Parameters_2 = smesh.CreateHypothesis('QuadrangleParams')
Quadrangle_Parameters_2.SetQuadType( smeshBuilder.QUAD_STANDARD )
Quadrangle_Parameters_2.SetTriaVertex( -1 )
Quadrangle_Parameters_2.SetEnforcedNodes( [], [] )
Mesh_1 = smesh.Mesh(Face_2)
UseExisting_1D = Mesh_1.UseExistingSegments()
status = Mesh_1.AddHypothesis(Quadrangle_Parameters_2)
status = Mesh_1.AddHypothesis(Quadrangle_2D)
Edge_13_1 = Mesh_1.GroupOnGeom(Edge_13,'Edge_13',SMESH.EDGE)
Edge_14_1 = Mesh_1.GroupOnGeom(Edge_14,'Edge_14',SMESH.EDGE)
Edge_15_1 = Mesh_1.GroupOnGeom(Edge_15,'Edge_15',SMESH.EDGE)
Edge_16_1 = Mesh_1.GroupOnGeom(Edge_16,'Edge_16',SMESH.EDGE)
UseExisting_1D_1 = smesh.CreateHypothesis( "UseExisting_1D" )
isDone = Mesh_1.Compute()
[ Edge_13_1, Edge_14_1, Edge_15_1, Edge_16_1 ] = Mesh_1.GetGroups()
Quadrangle_Parameters_3 = smesh.CreateHypothesis('QuadrangleParams')
Quadrangle_Parameters_3.SetQuadType( smeshBuilder.QUAD_STANDARD )
Quadrangle_Parameters_3.SetTriaVertex( -1 )
Quadrangle_Parameters_3.SetEnforcedNodes( [], [] )
Mesh_2 = smesh.Mesh(Face_3)
UseExisting_1D_2 = Mesh_2.UseExistingSegments()
status = Mesh_2.AddHypothesis(Quadrangle_Parameters_3)
status = Mesh_2.AddHypothesis(Quadrangle_2D)
Edge_9_1 = Mesh_2.GroupOnGeom(Edge_9,'Edge_9',SMESH.EDGE)
Edge_10_1 = Mesh_2.GroupOnGeom(Edge_10,'Edge_10',SMESH.EDGE)
Edge_11_1 = Mesh_2.GroupOnGeom(Edge_11,'Edge_11',SMESH.EDGE)
Edge_12_1 = Mesh_2.GroupOnGeom(Edge_12,'Edge_12',SMESH.EDGE)
isDone = Mesh_2.Compute()
[ Edge_9_1, Edge_10_1, Edge_11_1, Edge_12_1 ] = Mesh_2.GetGroups()
Quadrangle_Parameters_4 = smesh.CreateHypothesis('QuadrangleParams')
Quadrangle_Parameters_4.SetQuadType( smeshBuilder.QUAD_STANDARD )
Quadrangle_Parameters_4.SetTriaVertex( -1 )
Quadrangle_Parameters_4.SetEnforcedNodes( [], [] )
Mesh_3 = smesh.Mesh(Face_4)
UseExisting_1D_3 = Mesh_3.UseExistingSegments()
status = Mesh_3.AddHypothesis(Quadrangle_Parameters_4)
status = Mesh_3.AddHypothesis(Quadrangle_2D)
Edge_5_1 = Mesh_3.GroupOnGeom(Edge_5,'Edge_5',SMESH.EDGE)
Edge_6_1 = Mesh_3.GroupOnGeom(Edge_6,'Edge_6',SMESH.EDGE)
Edge_7_1 = Mesh_3.GroupOnGeom(Edge_7,'Edge_7',SMESH.EDGE)
Edge_8_1 = Mesh_3.GroupOnGeom(Edge_8,'Edge_8',SMESH.EDGE)
isDone = Mesh_3.Compute()
[ Edge_5_1, Edge_6_1, Edge_7_1, Edge_8_1 ] = Mesh_3.GetGroups()
Quadrangle_Parameters_5 = smesh.CreateHypothesis('QuadrangleParams')
Quadrangle_Parameters_5.SetQuadType( smeshBuilder.QUAD_STANDARD )
Quadrangle_Parameters_5.SetTriaVertex( -1 )
Quadrangle_Parameters_5.SetEnforcedNodes( [], [] )
Mesh_4 = smesh.Mesh(Face_5)
UseExisting_1D_4 = Mesh_4.UseExistingSegments()
status = Mesh_4.AddHypothesis(Quadrangle_Parameters_5)
status = Mesh_4.AddHypothesis(Quadrangle_2D)
Edge_1_1 = Mesh_4.GroupOnGeom(Edge_1,'Edge_1',SMESH.EDGE)
Edge_2_1 = Mesh_4.GroupOnGeom(Edge_2,'Edge_2',SMESH.EDGE)
Edge_3_1 = Mesh_4.GroupOnGeom(Edge_3,'Edge_3',SMESH.EDGE)
Edge_4_1 = Mesh_4.GroupOnGeom(Edge_4,'Edge_4',SMESH.EDGE)
isDone = Mesh_4.Compute()
[ Edge_1_1, Edge_2_1, Edge_3_1, Edge_4_1 ] = Mesh_4.GetGroups()
isDone = Mesh_1.Compute()
[ Edge_13_1, Edge_14_1, Edge_15_1, Edge_16_1 ] = Mesh_1.GetGroups()
isDone = Mesh_1.Compute()
[ Edge_13_1, Edge_14_1, Edge_15_1, Edge_16_1 ] = Mesh_1.GetGroups()
isDone = Mesh_1.Compute()
[ Edge_13_1, Edge_14_1, Edge_15_1, Edge_16_1 ] = Mesh_1.GetGroups()
isDone = Mesh_1.Compute()
[ Edge_13_1, Edge_14_1, Edge_15_1, Edge_16_1 ] = Mesh_1.GetGroups()
isDone = Mesh_1.Compute()
[ Edge_13_1, Edge_14_1, Edge_15_1, Edge_16_1 ] = Mesh_1.GetGroups()
Mesh_1.ExtrusionSweepObjects( [ Mesh_1 ], [], [ Mesh_1 ], [ 0, 0, 2 ], 1, 1, [  ], 0, [  ], [  ], 0 )
isDone = Mesh_2.Compute()
[ Edge_9_1, Edge_10_1, Edge_11_1, Edge_12_1 ] = Mesh_2.GetGroups()
Mesh_2.ExtrusionSweepObjects( [ Mesh_2 ], [], [ Mesh_2 ], [ 0, 0, 2 ], 1, 1, [  ], 0, [  ], [  ], 0 )
Mesh_1.ExtrusionSweepObjects( [ Mesh_3 ], [], [ Mesh_3 ], [ 0, 0, 2 ], 1, 1, [  ], 0, [  ], [  ], 0 )
Mesh_4.ExtrusionSweepObjects( [ Mesh_4 ], [], [ Mesh_4 ], [ 0, 0, 2 ], 1, 1, [  ], 0, [  ], [  ], 0 )
isDone = Mesh_1.Compute()
[ Edge_13_1, Edge_14_1, Edge_15_1, Edge_16_1 ] = Mesh_1.GetGroups()
Mesh_1.ConvertToQuadratic(0, Mesh_1,True)
isDone = Mesh_2.Compute()
[ Edge_9_1, Edge_10_1, Edge_11_1, Edge_12_1 ] = Mesh_2.GetGroups()
Mesh_2.ConvertToQuadratic(0, Mesh_2,True)
isDone = Mesh_3.Compute()
[ Edge_5_1, Edge_6_1, Edge_7_1, Edge_8_1 ] = Mesh_3.GetGroups()
Mesh_1.ConvertToQuadratic(0, Mesh_3,True)
isDone = Mesh_4.Compute()
[ Edge_1_1, Edge_2_1, Edge_3_1, Edge_4_1 ] = Mesh_4.GetGroups()
Mesh_4.ConvertToQuadratic(0, Mesh_4,True)
Compound_Mesh_1 = smesh.Concatenate( [ Mesh_1.GetMesh(), Mesh_2.GetMesh(), Mesh_3.GetMesh(), Mesh_4.GetMesh() ], 1, 1, 1e-05, False )
[ Edge_13_2, Edge_14_2, Edge_15_2, Edge_16_2, Edge_9_2, Edge_10_2, Edge_11_2, Edge_12_2, Edge_5_2, Edge_6_2, Edge_7_2, Edge_8_2, Edge_1_2, Edge_2_2, Edge_3_2, Edge_4_2 ] = Compound_Mesh_1.GetGroups()
Compound_Mesh_1.ExtrusionSweepObjects( [ Compound_Mesh_1 ], [ Compound_Mesh_1 ], [ Compound_Mesh_1 ], [ 0, 0, 2 ], 1, 1, [  ], 0, [  ], [  ], 0 )
[ Edge_13_2, Edge_14_2, Edge_15_2, Edge_16_2, Edge_9_2, Edge_10_2, Edge_11_2, Edge_12_2, Edge_5_2, Edge_6_2, Edge_7_2, Edge_8_2, Edge_1_2, Edge_2_2, Edge_3_2, Edge_4_2 ] = Compound_Mesh_1.GetGroups()
Group_1_0 = Compound_Mesh_1.CreateEmptyGroup( SMESH.FACE, 'Group_1' )
nbAdd = Group_1_0.Add( [ 38, 42, 46, 53 ] )
[ Edge_13_2, Edge_14_2, Edge_15_2, Edge_16_2, Edge_9_2, Edge_10_2, Edge_11_2, Edge_12_2, Edge_5_2, Edge_6_2, Edge_7_2, Edge_8_2, Edge_1_2, Edge_2_2, Edge_3_2, Edge_4_2, Group_1_0 ] = Compound_Mesh_1.GetGroups()
Group_2_0 = Compound_Mesh_1.CreateEmptyGroup( SMESH.FACE, 'Group_2' )
nbAdd = Group_2_0.Add( [ 36, 41, 52 ] )
[ Edge_13_2, Edge_14_2, Edge_15_2, Edge_16_2, Edge_9_2, Edge_10_2, Edge_11_2, Edge_12_2, Edge_5_2, Edge_6_2, Edge_7_2, Edge_8_2, Edge_1_2, Edge_2_2, Edge_3_2, Edge_4_2, Group_1_0, Group_2_0 ] = Compound_Mesh_1.GetGroups()
Group_3_0 = Compound_Mesh_1.CreateEmptyGroup( SMESH.FACE, 'Group_3' )
nbAdd = Group_3_0.Add( [ 1, 2, 3, 4 ] )
[ Edge_13_2, Edge_14_2, Edge_15_2, Edge_16_2, Edge_9_2, Edge_10_2, Edge_11_2, Edge_12_2, Edge_5_2, Edge_6_2, Edge_7_2, Edge_8_2, Edge_1_2, Edge_2_2, Edge_3_2, Edge_4_2, Group_1_0, Group_2_0, Group_3_0 ] = Compound_Mesh_1.GetGroups()
Group_4_0 = Compound_Mesh_1.CreateEmptyGroup( SMESH.FACE, 'Group_4' )
nbAdd = Group_4_0.Add( [ 37, 45, 51 ] )
[ Edge_13_2, Edge_14_2, Edge_15_2, Edge_16_2, Edge_9_2, Edge_10_2, Edge_11_2, Edge_12_2, Edge_5_2, Edge_6_2, Edge_7_2, Edge_8_2, Edge_1_2, Edge_2_2, Edge_3_2, Edge_4_2, Group_1_0, Group_2_0, Group_3_0, Group_4_0 ] = Compound_Mesh_1.GetGroups()
smesh.SetName(Compound_Mesh_1, 'Compound_Mesh_1')
try:
  Compound_Mesh_1.ExportMED(r'/home/student/Desktop/assignment/Semi cylinder hex.med',auto_groups=0,version=41,overwrite=1,meshPart=None,autoDimension=1)
  pass
except:
  print('ExportMED() failed. Invalid file name?')
smesh.SetName(Compound_Mesh_1, 'Compound_Mesh_1')
try:
  Compound_Mesh_1.ExportMED(r'/home/student/software/femus/applications/2021_fall/00_laplacian/input/semi_cylinder_hex.med',auto_groups=0,version=41,overwrite=1,meshPart=None,autoDimension=1)
  pass
except:
  print('ExportMED() failed. Invalid file name?')
Group_1_0.SetName( 'Group_1_0' )
Group_2_0.SetName( 'Group_2_0' )
Group_3_0.SetName( 'Group_3_0' )
Group_4_0.SetName( 'Group_4_0' )
smesh.SetName(Compound_Mesh_1, 'Compound_Mesh_1')
try:
  Compound_Mesh_1.ExportMED(r'/home/student/software/femus/applications/2021_fall/00_laplacian/input/semi_cylinder_hex.med',auto_groups=0,version=41,overwrite=1,meshPart=None,autoDimension=1)
  pass
except:
  print('ExportMED() failed. Invalid file name?')


## Set names of Mesh objects
smesh.SetName(Quadrangle_2D, 'Quadrangle_2D')
smesh.SetName(UseExisting_1D.GetAlgorithm(), 'UseExisting_1D')
smesh.SetName(Quadrangle_Parameters_2, 'Quadrangle Parameters_2')
smesh.SetName(Quadrangle_Parameters_3, 'Quadrangle Parameters_3')
smesh.SetName(Quadrangle_Parameters_1, 'Quadrangle Parameters_1')
smesh.SetName(Quadrangle_Parameters_4, 'Quadrangle Parameters_4')
smesh.SetName(Quadrangle_Parameters_5, 'Quadrangle Parameters_5')
smesh.SetName(Mesh_4.GetMesh(), 'Mesh_4')
smesh.SetName(Mesh_3.GetMesh(), 'Mesh_3')
smesh.SetName(Mesh_1.GetMesh(), 'Mesh_1')
smesh.SetName(Edge_12_1, 'Edge_12')
smesh.SetName(Mesh_2.GetMesh(), 'Mesh_2')
smesh.SetName(Edge_9_1, 'Edge_9')
smesh.SetName(Edge_11_1, 'Edge_11')
smesh.SetName(Edge_10_1, 'Edge_10')
smesh.SetName(Edge_16_1, 'Edge_16')
smesh.SetName(Edge_15_1, 'Edge_15')
smesh.SetName(Edge_14_1, 'Edge_14')
smesh.SetName(Edge_13_1, 'Edge_13')
smesh.SetName(Edge_3_1, 'Edge_3')
smesh.SetName(Edge_2_1, 'Edge_2')
smesh.SetName(Edge_1_1, 'Edge_1')
smesh.SetName(Edge_6_2, 'Edge_6')
smesh.SetName(Edge_7_2, 'Edge_7')
smesh.SetName(Edge_8_2, 'Edge_8')
smesh.SetName(Edge_4_1, 'Edge_4')
smesh.SetName(Edge_1_2, 'Edge_1')
smesh.SetName(Edge_2_2, 'Edge_2')
smesh.SetName(Edge_3_2, 'Edge_3')
smesh.SetName(Edge_4_2, 'Edge_4')
smesh.SetName(Edge_5_2, 'Edge_5')
smesh.SetName(Edge_12_2, 'Edge_12')
smesh.SetName(Edge_6_1, 'Edge_6')
smesh.SetName(Edge_7_1, 'Edge_7')
smesh.SetName(Edge_5_1, 'Edge_5')
smesh.SetName(Edge_13_2, 'Edge_13')
smesh.SetName(Edge_15_2, 'Edge_15')
smesh.SetName(Edge_8_1, 'Edge_8')
smesh.SetName(Edge_14_2, 'Edge_14')
smesh.SetName(Edge_9_2, 'Edge_9')
smesh.SetName(Edge_16_2, 'Edge_16')
smesh.SetName(Edge_11_2, 'Edge_11')
smesh.SetName(Edge_10_2, 'Edge_10')
smesh.SetName(Group_1_0, 'Group_1_0')
smesh.SetName(Group_2_0, 'Group_2_0')
smesh.SetName(Group_3_0, 'Group_3_0')
smesh.SetName(Group_4_0, 'Group_4_0')
smesh.SetName(Compound_Mesh_1.GetMesh(), 'Compound_Mesh_1')


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser()
